(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/Douglas/code/mtcs/blog/dougs-blog/src/js/App.js":[function(require,module,exports){
var BlogBox = require('./BlogBox');
 
React.render(React.createElement(BlogBox, {url: "http://localhost:3000/api/blogs", pollInterval: 2000}), document.getElementById('content'));

},{"./BlogBox":"/Users/Douglas/code/mtcs/blog/dougs-blog/src/js/BlogBox.js"}],"/Users/Douglas/code/mtcs/blog/dougs-blog/src/js/Blog.js":[function(require,module,exports){
var Blog = React.createClass({displayName: "Blog",
  render: function() {
    return (
      React.createElement("div", {className: "blog"}, 
        React.createElement("h2", {className: "blogAuthor"}, 
          this.props.author
        )
      )
    );
  }
});

module.exports = Blog;

},{}],"/Users/Douglas/code/mtcs/blog/dougs-blog/src/js/BlogBox.js":[function(require,module,exports){
var BlogList = require('./BlogList');
var BlogForm = require('./BlogForm');

var BlogBox = React.createClass({displayName: "BlogBox",
  loadBlogsFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleBlogSubmit: function(blog) {
    var blogs = this.state.data;
    var newBlogs = blogs.concat([blog]);
    this.setState({data: newBlogs});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: blog,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadBlogsFromServer();
    setInterval(this.loadBlogsFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      React.createElement("div", {className: "blogBox"}, 
        React.createElement("h1", null, "Blogs"), 
        React.createElement(BlogList, {data: this.state.data}), 
        React.createElement(BlogForm, {onBlogSubmit: this.handleBlogSubmit})
      )
    );
  }
});

module.exports = BlogBox;

},{"./BlogForm":"/Users/Douglas/code/mtcs/blog/dougs-blog/src/js/BlogForm.js","./BlogList":"/Users/Douglas/code/mtcs/blog/dougs-blog/src/js/BlogList.js"}],"/Users/Douglas/code/mtcs/blog/dougs-blog/src/js/BlogForm.js":[function(require,module,exports){
var BlogForm = React.createClass({displayName: "BlogForm",
  handleSubmit: function(e) {
    e.preventDefault();
    console.log("handling submit")
    var title = this.refs.title.value.trim();
    var body = this.refs.body.value.trim();
    if (!body || !title) {
      return;
    }
    this.props.onBlogSubmit({title: title, body: body});
    this.refs.title.value = '';
    this.refs.body.value = '';
  },
  render: function() {
    return (
      React.createElement("form", {className: "blogForm", onSubmit: this.handleSubmit}, 
        React.createElement("input", {type: "text", placeholder: "Blog Title", ref: "title"}), 
        React.createElement("input", {type: "text", placeholder: "Blog Body...", ref: "body"}), 
        React.createElement("input", {type: "submit", value: "Post"})
      )
    );
  }
});

module.exports = BlogForm;

},{}],"/Users/Douglas/code/mtcs/blog/dougs-blog/src/js/BlogList.js":[function(require,module,exports){
var Blog = require('./Blog')

var BlogList = React.createClass({displayName: "BlogList",
  render: function() {
    var blogNodes = this.props.data.map(function(blog, index) {
      return (
        React.createElement(Blog, {author: blog.author, key: index}, 
          blog.title, 
          blog.body
        )
      );
    });
    return (
      React.createElement("div", {className: "blogList"}, 
        blogNodes
      )
    );
  }
});

module.exports = BlogList;

},{"./Blog":"/Users/Douglas/code/mtcs/blog/dougs-blog/src/js/Blog.js"}]},{},["/Users/Douglas/code/mtcs/blog/dougs-blog/src/js/App.js"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
